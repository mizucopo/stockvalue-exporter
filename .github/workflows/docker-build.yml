---
name: Build and Push Docker image

"on":
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Git ユーザー設定
        run: |
          git config user.name "mizu"
          git config user.email "mizu.copo@gmail.com"

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install toml parser
        run: pip install toml

      - name: Extract version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: リポジトリ名を取得
        id: repo
        run: |
          repo=$(basename $GITHUB_REPOSITORY)
          echo "repo=$repo" >> $GITHUB_OUTPUT
          echo "image=mizucopo/$repo" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          file: ./Dockerfile.prod
          platforms: linux/amd64
          push: true
          tags: |
            ${{ steps.repo.outputs.image }}:latest
            ${{ steps.repo.outputs.image }}:${{ steps.vars.outputs.version }}

      - name: タグを作成してプッシュ
        run: |
          git fetch --tags
          if ! git rev-parse ${{ steps.vars.outputs.version }} >/dev/null 2>&1
          then
            git tag ${{ steps.vars.outputs.version }}
            git push origin ${{ steps.vars.outputs.version }}
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.vars.outputs.version }}
          target_commitish: main
          name: Release ${{ steps.vars.outputs.version }}
          body: |
            VERSION: ${{ steps.vars.outputs.version }}
            Docker image:
              [${{ steps.repo.outputs.image }}:${{ steps.vars.outputs.version }}](https://hub.docker.com/r/${{ steps.repo.outputs.image }}/tags?name=${{ steps.vars.outputs.version }})
